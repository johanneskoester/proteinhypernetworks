/* Copyright (c) 2010, Johannes Köster <johannes.koester@tu-dortmund.de>
 * All rights reserved.
 *
 * This software is open-source under the BSD license; see "license.txt"
 * for a description.
 */

/*
 * TasksView.java
 *
 * Created on 01.03.2010, 12:33:32
 */
package proteinhypernetworkeditor;

import controller.Controller;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.HashSet;
import javax.swing.JPanel;
import proteinHypernetwork.NetworkEntity;
import proteinHypernetwork.constraints.Constraint;
import proteinHypernetworkVisualization.implementation.jung.visualization.JungProteinNetworkVisualization;

/**
 *
 * @author Johannes Köster <johannes.koester@tu-dortmund.de>
 */
public class TasksView extends javax.swing.JPanel {

  private JPanel current;
  private GridLayout layout;
  private JungProteinNetworkVisualization networkVisualization;

  /** Creates new form TasksView */
  public TasksView() {
    initComponents();

    layout = (GridLayout) getLayout();

    current = proteinManagerView;
    add(proteinManagerView);
  }

  public void activateProteinManager() {
    activateView(proteinManagerView);
  }

  public void activateInteractionManager() {
    activateView(interactionManagerView);
  }

  public void activateConstraintManager() {
    activateView(constraintManagerView);
  }

  public void activateNetworkVisualization() {
    if (networkVisualization == null) {
      reloadNetworkVisualization();
    } else {
      Dimension visSize = new Dimension(getSize().width - 100, getSize().height - 100);
      networkVisualization.resetHighlighting();
      networkVisualization.setVisualizationSize(visSize);
      networkVisualization.repaint();
    }
    activateView(networkVisualization);
  }

  private void reloadNetworkVisualization() {
    if (networkVisualization == null) {
      Dimension visSize = new Dimension(getSize().width - 100, getSize().height - 100);
      networkVisualization = new JungProteinNetworkVisualization();
      networkVisualization.setVisualizationSize(visSize);
      networkVisualization.setProteinNetwork(Controller.getInstance().getHypernetwork());

      Controller.getInstance().addPropertyChangeListener(new PropertyChangeListener() {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
          boolean active = current == networkVisualization;
          networkVisualization = null;
          if(active)
            activateNetworkVisualization();
        }
      });
    }
  }

  public void activateConstraintsVisualization() {
    activateNetworkVisualization();
    HashSet<NetworkEntity> entities = new HashSet<NetworkEntity>();

    for(Constraint c : Controller.getInstance().getHypernetwork().getConstraints()) {
      entities.add(c.getConstrainedNetworkEntity());
    }

    networkVisualization.highlightNetworkEntities(entities);
  }

  private void activateView(JPanel view) {
    if (current != view) {
      remove(current);
      current = view;
      add(current);
      updateUI();
    }
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    interactionManagerView = new proteinhypernetworkeditor.interactions.InteractionManagerView();
    constraintManagerView = new proteinhypernetworkeditor.constraints.ConstraintManagerView();
    proteinManagerView = new proteinhypernetworkeditor.proteins.ProteinManagerView();

    interactionManagerView.setName("interactionManagerView"); // NOI18N

    constraintManagerView.setName("constraintManagerView"); // NOI18N

    setName("Form"); // NOI18N
    setLayout(new java.awt.GridLayout(1, 0));

    proteinManagerView.setName("proteinManagerView"); // NOI18N
    add(proteinManagerView);
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private proteinhypernetworkeditor.constraints.ConstraintManagerView constraintManagerView;
  private proteinhypernetworkeditor.interactions.InteractionManagerView interactionManagerView;
  private proteinhypernetworkeditor.proteins.ProteinManagerView proteinManagerView;
  // End of variables declaration//GEN-END:variables
}
