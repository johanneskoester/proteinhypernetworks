/* Copyright (c) 2010, Johannes Köster <johannes.koester@tu-dortmund.de>
 * All rights reserved.
 *
 * This software is open-source under the BSD license; see "license.txt"
 * for a description.
 */

/*
 * JungProteinComplexVisualization.java
 *
 * Created on 27.07.2010, 19:00:09
 */
package proteinHypernetworkVisualization.implementation.jung.visualization;

import edu.uci.ics.jung.algorithms.layout.FRLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.Hypergraph;
import edu.uci.ics.jung.graph.UndirectedGraph;
import edu.uci.ics.jung.io.GraphMLWriter;
import edu.uci.ics.jung.visualization.GraphZoomScrollPane;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse.Mode;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.renderers.BasicHypergraphRenderer;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import javax.imageio.ImageIO;
import logicProteinHypernetwork.analysis.complexes.Complex;
import proteinHypernetwork.ProteinHypernetwork;
import proteinHypernetwork.interactions.Interaction;
import proteinHypernetwork.proteins.Protein;
import proteinHypernetworkVisualization.implementation.jung.graphs.JungProteinComplexesGraph;
import proteinHypernetworkVisualization.implementation.jung.graphs.JungProteinComplexesHypergraph;

/**
 *
 * @author Johannes Köster <johannes.koester@tu-dortmund.de>
 */
public class JungProteinComplexVisualization extends javax.swing.JPanel implements JungVisualization {

  private GraphZoomScrollPane graphZoomScrollPane;
  private Set<Complex> pickedComplexes;
  private VisualizationViewer complexesGraphVisualizationViewer;
  private VisualizationViewer currentVisualization;
  private ProteinHypernetwork hypernetwork;
  private List<Complex> complexes;
  private JungProteinComplexesGraph complexesGraph;
  private DefaultModalGraphMouse graphMouse;
  private Hypergraph currentGraph;
  private Dimension size = new Dimension(300, 300);

  /** Creates new form JungProteinComplexVisualization */
  public JungProteinComplexVisualization() {
    initComponents();
    showComplexesButton.setSelected(true);
  }

  public void setVisualizationSize(Dimension d) {
    size = d;
  }

  public void saveToPNG(File file) throws IOException {
    BufferedImage bi = new BufferedImage(currentVisualization.getSize().width, currentVisualization.getSize().height, BufferedImage.TYPE_INT_RGB);

    Color bg = currentVisualization.getBackground();
    currentVisualization.setBackground(Color.WHITE);
    currentVisualization.setDoubleBuffered(false);

    currentVisualization.paintAll(bi.createGraphics());

    ImageIO.write(bi, "png", file);
    currentVisualization.setDoubleBuffered(true);
    currentVisualization.setBackground(bg);
  }

  public void saveToGraphML(File file) throws IOException {
    GraphMLWriter w = new GraphMLWriter();
    w.setVertexIDs(new ToStringLabeller());
    w.save(currentGraph, new FileWriter(file));
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        differentVisualizations = new javax.swing.ButtonGroup();
        mouseModes = new javax.swing.ButtonGroup();
        controls = new javax.swing.JPanel();
        showComplexesButton = new javax.swing.JToggleButton();
        showNetworkButton = new javax.swing.JToggleButton();
        showOverlapButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        moveZoomButton = new javax.swing.JToggleButton();
        selectButton = new javax.swing.JToggleButton();
        graph = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(600, 600));
        setLayout(new java.awt.GridBagLayout());

        controls.setLayout(new java.awt.GridBagLayout());

        differentVisualizations.add(showComplexesButton);
        showComplexesButton.setText("Show Complexes");
        showComplexesButton.setToolTipText("<html>Shows protein complexes as vertices.\nIf two complexes overlap significantly (Jaccard index > 0.2), draws an edge between them.");
        showComplexesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showComplexesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        controls.add(showComplexesButton, gridBagConstraints);

        differentVisualizations.add(showNetworkButton);
        showNetworkButton.setText("Show Network");
        showNetworkButton.setToolTipText("<html>Shows selected complex as protein interaction network.");
        showNetworkButton.setEnabled(false);
        showNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showNetworkButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        controls.add(showNetworkButton, gridBagConstraints);

        differentVisualizations.add(showOverlapButton);
        showOverlapButton.setText("Show as Hypergraph");
        showOverlapButton.setToolTipText("<html>Shows selected complexes as hyperedges.");
        showOverlapButton.setEnabled(false);
        showOverlapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showOverlapButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        controls.add(showOverlapButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        controls.add(jSeparator1, gridBagConstraints);

        mouseModes.add(moveZoomButton);
        moveZoomButton.setText("Move and Zoom");
        moveZoomButton.setSelected(true);
        moveZoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveZoomButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        controls.add(moveZoomButton, gridBagConstraints);

        mouseModes.add(selectButton);
        selectButton.setText("Select and Drag Vertices");
        selectButton.setToolTipText("Hold SHIFT to select multiple vertices.");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        controls.add(selectButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(controls, gridBagConstraints);

        graph.setLayout(new java.awt.GridLayout(1, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(graph, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

  public Hypergraph getCurrentGraph() {
    return currentGraph;
  }

  private void showComplexesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showComplexesButtonActionPerformed
    if (showComplexesButton.isSelected()) {
      showComplexesGraph();
    }
  }//GEN-LAST:event_showComplexesButtonActionPerformed

  private void showNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showNetworkButtonActionPerformed
    if (showNetworkButton.isSelected()) {
      showProteinNetworkForComplex();
    }
  }//GEN-LAST:event_showNetworkButtonActionPerformed

  private void showOverlapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showOverlapButtonActionPerformed
    showOverlapHypergraph();
  }//GEN-LAST:event_showOverlapButtonActionPerformed

  private void moveZoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveZoomButtonActionPerformed
    if (moveZoomButton.isSelected()) {
      graphMouse.setMode(Mode.TRANSFORMING);
    }
  }//GEN-LAST:event_moveZoomButtonActionPerformed

  private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
    if (selectButton.isSelected()) {
      graphMouse.setMode(Mode.PICKING);
    }
  }//GEN-LAST:event_selectButtonActionPerformed

  private void showOverlapHypergraph() {
    JungProteinComplexesHypergraph hypergraph = new JungProteinComplexesHypergraph();

    Collection<Complex> pcs = new ArrayList<Complex>();
    for (Complex c : pickedComplexes) {
      pcs.add(c);
    }

    hypergraph.setProteinComplexes(hypernetwork, pcs);
    HypergraphLayout<Protein, Complex> layout = new HypergraphLayout<Protein, Complex>(hypergraph, FRLayout.class);

    VisualizationViewer vv = new VisualizationViewer(layout, size);
    vv.setDoubleBuffered(true);
    vv.setRenderer(new BasicHypergraphRenderer<Protein, Complex>());
    vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller<Protein>());
    vv.getRenderContext().setVertexShapeTransformer(new DefaultGraphStyle().getVertexShapeTransformer());

    graphMouse = new DefaultModalGraphMouse();
    vv.setGraphMouse(graphMouse);
    moveZoomButton.setSelected(true);

    if (graphZoomScrollPane != null) {
      graph.remove(graphZoomScrollPane);
    }
    graphZoomScrollPane = new GraphZoomScrollPane(vv);
    graph.add(graphZoomScrollPane);
    currentVisualization = vv;

    updateUI();
  }

  private void showProteinNetworkForComplex() {
    Complex c = pickedComplexes.iterator().next();

    UndirectedGraph<Protein, Interaction> g = c.getSubnetwork();
    currentGraph = g;

    Layout<Protein, Interaction> layout = new FRLayout<Protein, Interaction>(g);

    VisualizationViewer<Protein, Interaction> vv = new VisualizationViewer<Protein, Interaction>(layout, size);
    vv.setDoubleBuffered(true);
    new DefaultGraphStyle().setGraphStyle(vv, true);
    graphMouse = new DefaultModalGraphMouse();
    vv.setGraphMouse(graphMouse);
    moveZoomButton.setSelected(true);

    if (graphZoomScrollPane != null) {
      graph.remove(graphZoomScrollPane);
    }
    graphZoomScrollPane = new GraphZoomScrollPane(vv);
    graph.add(graphZoomScrollPane);
    currentVisualization = vv;
    updateUI();
  }

  private void showComplexesGraph() {

    currentGraph = complexesGraph;

    if (graphZoomScrollPane != null) {
      graph.remove(graphZoomScrollPane);
    }
    graphZoomScrollPane = new GraphZoomScrollPane(complexesGraphVisualizationViewer);
    graphMouse = new DefaultModalGraphMouse();

    complexesGraphVisualizationViewer.setGraphMouse(graphMouse);


    if (pickedComplexes != null) {
      for (Complex c : pickedComplexes) {
        complexesGraphVisualizationViewer.getPickedVertexState().pick(c, true);
      }
      graphMouse.setMode(Mode.PICKING);
      selectButton.setSelected(true);
    } else {
      moveZoomButton.setSelected(true);
    }
    handleButtons();

    graph.add(graphZoomScrollPane);



    currentVisualization = complexesGraphVisualizationViewer;
    updateUI();
  }

  private void handleButtons() {
    if (pickedComplexes != null && pickedComplexes.size() == 1) {
      showNetworkButton.setEnabled(true);
      showOverlapButton.setEnabled(true);
    } else if (pickedComplexes != null && pickedComplexes.size() > 1) {
      showOverlapButton.setEnabled(true);
      showNetworkButton.setEnabled(false);
    } else {
      showNetworkButton.setEnabled(false);
      showOverlapButton.setEnabled(false);
    }
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controls;
    private javax.swing.ButtonGroup differentVisualizations;
    private javax.swing.JPanel graph;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.ButtonGroup mouseModes;
    private javax.swing.JToggleButton moveZoomButton;
    private javax.swing.JToggleButton selectButton;
    private javax.swing.JToggleButton showComplexesButton;
    private javax.swing.JToggleButton showNetworkButton;
    private javax.swing.JToggleButton showOverlapButton;
    // End of variables declaration//GEN-END:variables

  public void setProteinComplexes(ProteinHypernetwork hypernetwork, List<Complex> complexes) {
    this.hypernetwork = hypernetwork;
    this.complexes = complexes;

    complexesGraph = new JungProteinComplexesGraph();
    complexesGraph.setProteinComplexes(hypernetwork, complexes);
    Layout layout = new BalloonHubLayout(complexesGraph);
    layout.setSize(size);
    //layout.setMaxIterations(10);
    complexesGraphVisualizationViewer = new VisualizationViewer(layout, size);
    complexesGraphVisualizationViewer.setDoubleBuffered(true);

    new DefaultGraphStyle().setGraphStyle(complexesGraphVisualizationViewer, false);


    complexesGraphVisualizationViewer.addMouseListener(new MouseListener() {

      public void mouseClicked(MouseEvent me) {
      }

      public void mousePressed(MouseEvent me) {
      }

      public void mouseReleased(MouseEvent me) {
        pickedComplexes = complexesGraphVisualizationViewer.getPickedVertexState().getPicked();
        handleButtons();
      }

      public void mouseEntered(MouseEvent me) {
      }

      public void mouseExited(MouseEvent me) {
      }
    });

    showComplexesGraph();
  }
}
