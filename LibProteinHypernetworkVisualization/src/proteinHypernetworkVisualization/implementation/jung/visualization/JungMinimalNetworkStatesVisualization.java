/* Copyright (c) 2010, Johannes Köster <johannes.koester@tu-dortmund.de>
 * All rights reserved.
 *
 * This software is open-source under the BSD license; see "license.txt"
 * for a description.
 */
package proteinHypernetworkVisualization.implementation.jung.visualization;

import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.visualization.GraphZoomScrollPane;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse.Mode;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import logicProteinHypernetwork.networkStates.MinimalNetworkState;
import proteinHypernetwork.ProteinHypernetwork;
import proteinHypernetworkVisualization.implementation.jung.graphs.JungMinimalNetworkStatesGraph;

/**
 *
 * @author Johannes Köster <johannes.koester@tu-dortmund.de>
 */
public class JungMinimalNetworkStatesVisualization extends javax.swing.JPanel implements JungVisualization {

  private GraphZoomScrollPane graphZoomScrollPane;
  private DefaultModalGraphMouse graphMouse;
  private ProteinHypernetwork hypernetwork;
  private Collection<MinimalNetworkState> minimalNetworkStates;
  private JungMinimalNetworkStatesGraph mnsgraph;
  private Dimension size = new Dimension(300, 300);
  private VisualizationViewer vv;

  /**
   * Creates new form JungMinimalNetworkStatesVisualization
   */
  public JungMinimalNetworkStatesVisualization() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        graph = new javax.swing.JPanel();
        controls = new javax.swing.JPanel();
        movezoom = new javax.swing.JToggleButton();
        selectdrag = new javax.swing.JToggleButton();

        setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout graphLayout = new javax.swing.GroupLayout(graph);
        graph.setLayout(graphLayout);
        graphLayout.setHorizontalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        graphLayout.setVerticalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        add(graph, gridBagConstraints);

        controls.setLayout(new java.awt.GridBagLayout());

        movezoom.setText("Move and Zoom");
        movezoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movezoomActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        controls.add(movezoom, gridBagConstraints);

        selectdrag.setText("Select and Drag Vertices");
        selectdrag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectdragActionPerformed(evt);
            }
        });
        controls.add(selectdrag, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        add(controls, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void movezoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movezoomActionPerformed
      if (movezoom.isSelected()) {
        graphMouse.setMode(Mode.TRANSFORMING);
      }
    }//GEN-LAST:event_movezoomActionPerformed

    private void selectdragActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectdragActionPerformed
      if (selectdrag.isSelected()) {
        graphMouse.setMode(Mode.PICKING);
      }
    }//GEN-LAST:event_selectdragActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controls;
    private javax.swing.JPanel graph;
    private javax.swing.JToggleButton movezoom;
    private javax.swing.JToggleButton selectdrag;
    // End of variables declaration//GEN-END:variables

  public void saveToPNG(File file) throws IOException {
    throw new UnsupportedOperationException("Not supported yet.");
  }

  public void saveToGraphML(File file) throws IOException {
    throw new UnsupportedOperationException("Not supported yet.");
  }

  public void setMinimalNetworkStates(ProteinHypernetwork hypernetwork, Collection<MinimalNetworkState> states) {
    this.hypernetwork = hypernetwork;
    this.minimalNetworkStates = states;

    mnsgraph = new JungMinimalNetworkStatesGraph();
    mnsgraph.setMinimalNetworkStates(states);

    Layout layout = new BalloonHubLayout(mnsgraph);
    layout.setSize(size);

    vv = new VisualizationViewer(layout, size);
    new MinimalNetworkStateGraphStyle().setGraphStyle(vv, false);
    vv.setDoubleBuffered(true);

    if (graphZoomScrollPane != null) {
      graph.remove(graphZoomScrollPane);
    }
    graphZoomScrollPane = new GraphZoomScrollPane(vv);
    graphMouse = new DefaultModalGraphMouse();

    vv.setGraphMouse(graphMouse);

    graph.add(graphZoomScrollPane);
    updateUI();
  }
}
